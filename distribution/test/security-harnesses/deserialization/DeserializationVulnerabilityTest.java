/*
 * Copyright (c) Codice Foundation
 * <p>
 * This is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser
 * General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or any later version.
 * <p>
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without
 * even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details. A copy of the GNU Lesser General Public License
 * is distributed along with this program and can be found at
 * <http://www.gnu.org/licenses/lgpl.html>.
 */
package org.codice.alliance.test.security.harness.deserialization;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.Serializable;
import java.util.Base64;
import org.codice.alliance.test.security.harness.common.SecurityTestBase;
import org.codice.alliance.test.security.harness.common.VulnerabilityTestUtils;
import org.junit.Ignore;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Security test harness for Java deserialization vulnerabilities.
 *
 * <p>This test harness demonstrates vulnerabilities related to unsafe deserialization of untrusted
 * data.
 *
 * <p><strong>OWASP Classification:</strong> A08:2021 â€“ Software and Data Integrity Failures
 */
public class DeserializationVulnerabilityTest extends SecurityTestBase {

  private static final Logger LOGGER = LoggerFactory.getLogger(DeserializationVulnerabilityTest.class);

  /** Simple serializable class for testing. */
  private static class TestData implements Serializable {
    private static final long serialVersionUID = 1L;
    private String data;

    public TestData(String data) {
      this.data = data;
    }

    public String getData() {
      return data;
    }
  }

  /**
   * Tests unsafe deserialization of user-supplied data.
   */
  @Test
  @SecurityTest(description = "Unsafe Java deserialization", severity = "CRITICAL")
  @OWASP(category = "A08:2021-Software and Data Integrity Failures")
  @Ignore("Test demonstrates vulnerability - remove @Ignore to verify fix")
  public void testUnsafeDeserialization() throws Exception {
    LOGGER.info("Testing unsafe deserialization");

    // Arrange: Create serialized object
    TestData testData = new TestData("malicious payload");
    String serialized = VulnerabilityTestUtils.createSerializedObject(testData);

    // Act: Deserialize (unsafe - no validation)
    byte[] data = Base64.getDecoder().decode(serialized);
    try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data))) {
      Object obj = ois.readObject();
      LOGGER.warn("Deserialization succeeded - vulnerability exists");
      assertVulnerabilityExists(obj.toString(), "malicious");
    }
  }

  /**
   * Tests error handling for malformed serialized data.
   */
  @Test
  @SecurityTest(description = "Malformed serialized data handling", severity = "MEDIUM")
  @Ignore("Test demonstrates vulnerability - remove @Ignore to verify fix")
  public void testMalformedDeserializationData() throws Exception {
    LOGGER.info("Testing malformed deserialization data");

    // Arrange: Create malformed data
    String malformed = VulnerabilityTestUtils.createMalformedSerializedObject();
    byte[] data = Base64.getDecoder().decode(malformed);

    // Act & Assert: Should throw exception
    assertThrowsOnMaliciousInput(
        malformed,
        input -> {
          try (ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(data))) {
            return ois.readObject();
          } catch (IOException | ClassNotFoundException e) {
            throw new RuntimeException(e);
          }
        },
        IOException.class);
  }
}
